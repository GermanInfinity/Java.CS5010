MAIN FUNCTION (WITH COMMENTS): 
 public static void main(String args[]) {

    /** Beginning of driver, that receives user arguments from command line **/ 
    System.out.println("Please enter the size of maze, type of maze, starting point "
        + "of player and goal location.");

    Scanner in = new Scanner(System.in);
    System.out.println("Please enter the number of rows in the maze: ");
    int row = in.nextInt();

    System.out.println("Please enter the number of columns in the maze: ");
    int col = in.nextInt();

    System.out.println("Please input values in brackets for type of maze: (1) for Perfect maze, "
        + "(2) for Room maze or Non-perfect maze and (3) for Wrapping room maze:");
    int maze = in.nextInt();
    if (maze < 1 || maze > 3) { 
      throw new IllegalArgumentException("Please enter a valid maze type.");
    }

    System.out.println("Please enter the starting row position of the player: ");
    int startRow = in.nextInt();

    System.out.println("Please enter the starting column position of the player: ");
    int startCol = in.nextInt();

    System.out.println("Please enter the row position of the goal: ");
    int goalRow = in.nextInt();

    System.out.println("Please enter the column position of the goal: ");
    int goalCol = in.nextInt();

    /** If statements that specify what type of maze to construct **/
    if (maze == 1) {

      /** Constructing a perfect maze **/ 
      Maze perfectMaze = new PerfectMaze(row, col, startRow, startCol, goalRow, goalCol);
      
      /** Constructing a player **/ 
      Player player = new Player("John", 0);

      /** Loop for solving maze **/ 
      while (perfectMaze.atGoal() == false) {
        
        /** Get possible moves player can take **/ 
        ArrayList<String> moves = perfectMaze.getMoves();
        System.out.println("Player has these possible moves: " + moves);

        System.out.println("Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: ");
        int choice = in.nextInt();
        String move = player.pickMove(choice);
        System.out.println("Player chose: " + move);

        /** Make the move specified by the player **/ 
        perfectMaze.makeMove(move, moves);
        
        /** Report on any event that happened to the player **/ 
        System.out.println(perfectMaze.gotGold()); 
        System.out.println(perfectMaze.wasAttacked()); 
        double playerGold = player.getGold();
        double goldValue = perfectMaze.Event(playerGold);
        player.setGold(goldValue);
        
        System.out.println("Player: " + player.toString());
        String position = perfectMaze.findPlayer();
        System.out.println("Player row position: " + position.substring(0, 1)
            + " Player column position: " + position.substring(1, 2));
        System.out.println("\n");
      }
      /** Check for reaching maze solution **/ 
      if (perfectMaze.atGoal() == true) { 
        System.out.println("Player reached goal.");
      }
    }

    if (maze == 2) {
      System.out.println("Please enter the remaining walls in the maze: ");
      int remainingWalls = in.nextInt();

      /** Constructing a room maze **/ 
      Maze roomMaze = new RoomMaze(row, col, remainingWalls, startRow, startCol, goalRow, goalCol);
      
      /** Constructing a player **/
      Player player = new Player("John", 0);

      /** Loop for solving maze **/ 
      while (roomMaze.atGoal() == false) {
        
        /** Get possible moves player can take **/ 
        ArrayList<String> moves = roomMaze.getMoves();
        System.out.println("Player has these possible moves: " + moves);

        System.out.println("Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: ");
        int choice = in.nextInt();
        String move = player.pickMove(choice);
        System.out.println("Player chose: " + move);

        /** Make the move specified by the player **/ 
        roomMaze.makeMove(move, moves);
        
        /** Report on any event that happened to the player **/ 
        System.out.println(roomMaze.gotGold()); 
        System.out.println(roomMaze.wasAttacked()); 
        double playerGold = player.getGold();
        double goldValue = roomMaze.Event(playerGold);

        player.setGold(goldValue);
        System.out.println(player.toString());
        String position = roomMaze.findPlayer();
        System.out.println("Player row position: " + position.substring(0, 1)
            + " Player column position: " + position.substring(1, 2));
        System.out.println("\n");
      }
      /** Check for reaching maze solution **/
      if (roomMaze.atGoal() == true) { 
        System.out.println("Player reached goal.");
      }
    }
    
    if (maze == 3) {
      System.out.println("Please enter the remaining walls in the maze: ");
      int remainingWalls = in.nextInt();

      /** Constructing a wrapping room maze **/ 
      Maze WrappingroomMaze = new WrappingRoomMaze(row, col, remainingWalls, startRow, startCol, goalRow, goalCol);
      
      /** Constructing a player **/
      Player player = new Player("John", 0);

      /** Loop for solving maze **/
      while (WrappingroomMaze.atGoal() == false) {
        
        /** Get possible moves player can take **/ 
        ArrayList<String> moves = WrappingroomMaze.getMoves();
        System.out.println("Player has these possible moves: " + moves);

        System.out.println("Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: ");
        int choice = in.nextInt();
        String move = player.pickMove(choice);
        System.out.println("Player chose: " + move);

        /** Make the move specified by the player **/ 
        WrappingroomMaze.makeMove(move, moves);
        
        /** Report on any event that happened to the player **/ 
        System.out.println(WrappingroomMaze.gotGold()); 
        System.out.println(WrappingroomMaze.wasAttacked()); 
        double playerGold = player.getGold();
        double goldValue = WrappingroomMaze.Event(playerGold);

        player.setGold(goldValue);
        System.out.println(player.toString());
        String position = WrappingroomMaze.findPlayer();
        System.out.println("Player row position: " + position.substring(0, 1)
            + " Player column position: " + position.substring(1, 2));
        System.out.println("\n");
      }
      /** Check for reaching maze solution **/
      if (WrappingroomMaze.atGoal() == true) { 
        System.out.println("Player reached goal.");
      }
    }

  }


OUTPUT:

Please enter the size of maze, type of maze, starting point of player and goal location.
Please enter the number of rows in the maze: 
4
Please enter the number of columns in the maze: 
4
Please input values in brackets for type of maze: (1) for Perfect maze, (2) for Room maze or Non-perfect maze and (3) for Wrapping room maze:
1
Please enter the starting row position of the player: 
0
Please enter the starting column position of the player: 
0
Please enter the row position of the goal: 
3
Please enter the column position of the goal: 
3

Player has these possible moves: [South]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
2
Player chose: South
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 0.0 gold coins.
Player row position: 1 Player column position: 0


Player has these possible moves: [North, East]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
3
Player chose: East
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 0.0 gold coins.
Player row position: 1 Player column position: 1


Player has these possible moves: [South, North, West]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
1
Player chose: North
Player picked up some Gold!
Player got Robbed
Player: John has 90.0 gold coins.
Player row position: 0 Player column position: 1


Player has these possible moves: [South]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
2
Player chose: South
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 90.0 gold coins.
Player row position: 1 Player column position: 1


Player has these possible moves: [South, North, West]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
2
Player chose: South
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 90.0 gold coins.
Player row position: 2 Player column position: 1


Player has these possible moves: [North, East, West]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
4
Player chose: West
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 90.0 gold coins.
Player row position: 2 Player column position: 0


Player has these possible moves: [South, East]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
2
Player chose: South
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 90.0 gold coins.
Player row position: 3 Player column position: 0


Player has these possible moves: [North, East]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
3
Player chose: East
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 90.0 gold coins.
Player row position: 3 Player column position: 1


Player has these possible moves: [West]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
4
Player chose: West
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 90.0 gold coins.
Player row position: 3 Player column position: 0


Player has these possible moves: [North, East]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
1
Player chose: North
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 90.0 gold coins.
Player row position: 2 Player column position: 0


Player has these possible moves: [South, East]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
3
Player chose: East
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 90.0 gold coins.
Player row position: 2 Player column position: 1


Player has these possible moves: [North, East, West]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
3
Player chose: East
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 90.0 gold coins.
Player row position: 2 Player column position: 2


Player has these possible moves: [South, North, East, West]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
2
Player chose: South
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 90.0 gold coins.
Player row position: 3 Player column position: 2


Player has these possible moves: [North]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
1
Player chose: North
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 90.0 gold coins.
Player row position: 2 Player column position: 2


Player has these possible moves: [South, North, East, West]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
1
Player chose: North
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 90.0 gold coins.
Player row position: 1 Player column position: 2


Player has these possible moves: [South, East]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
3
Player chose: East
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 90.0 gold coins.
Player row position: 1 Player column position: 3


Player has these possible moves: [North, West]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
1
Player chose: North
Player picked up some Gold!
Player didn't get attacked.
Player: John has 190.0 gold coins.
Player row position: 0 Player column position: 3


Player has these possible moves: [South, West]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
4
Player chose: West
Player picked up some Gold!
Player didn't get attacked.
Player: John has 290.0 gold coins.
Player row position: 0 Player column position: 2


Player has these possible moves: [East]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
3
Player chose: East
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 290.0 gold coins.
Player row position: 0 Player column position: 3


Player has these possible moves: [South, West]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
2
Player chose: South
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 290.0 gold coins.
Player row position: 1 Player column position: 3


Player has these possible moves: [North, West]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
4
Player chose: West
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 290.0 gold coins.
Player row position: 1 Player column position: 2


Player has these possible moves: [South, East]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
2
Player chose: South
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 290.0 gold coins.
Player row position: 2 Player column position: 2


Player has these possible moves: [South, North, East, West]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
3
Player chose: East
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 290.0 gold coins.
Player row position: 2 Player column position: 3


Player has these possible moves: [South, West]
Please choose values in parenthesis for direction, (1) North, (2) South, (3) East, (4) West: 
2
Player chose: South
Player didn't get any Gold.
Player didn't get attacked.
Player: John has 290.0 gold coins.
Player row position: 3 Player column position: 3


Player reached goal.
